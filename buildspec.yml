version: 0.2

phases:
  install:
    run-as: root
    on-failure: ABORT
    # runtime-versions:
    #   runtime: version
    #   runtime: version
    commands:
      - echo "--------------------------------Installing yq library--------------------------------"
      - sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
      - sudo chmod +x /usr/bin/yq
  pre_build:
    on-failure: ABORT  
    commands:
      - echo "--------------------------------Logging in to Amazon ECR--------------------------------"
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    on-failure: ABORT  
    commands:
      - echo "--------------------------------Build started on `date`--------------------------------"    
      - echo "--------------------------------Creating tag for docker image--------------------------------"       
      - COMMIT_ID=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-7); IMAGE_TAG="1.0.0-${COMMIT_ID}"; export IMAGE_TAG=$IMAGE_TAG
      - echo $IMAGE_TAG      
      - IMAGE_TAG_EXISTS=$(aws ecr list-images --repository-name $ENVIRONMENT/$IMAGE_REPO_NAME --query 'imageIds[]' | jq -r '.[] | select(.imageTag=="'$IMAGE_TAG'")'); export IMAGE_TAG_EXISTS=$IMAGE_TAG_EXISTS
      - echo "--------------------------------Validating if tag for docker image exists--------------------------------"   
      - echo $IMAGE_TAG_EXISTS
      - |
        if [ -n "$IMAGE_TAG_EXISTS" ] 
        then 
          echo "--------------------------------Image tag already exists--------------------------------"          
        else 
          echo "--------------------------------Building the .WAR file--------------------------------"  
          chmod +x mvnw    
          ./mvnw clean package                   
          echo "--------------------------------Building the Docker image--------------------------------"  
          docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
          docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ENVIRONMENT/$IMAGE_REPO_NAME:$IMAGE_TAG           
        fi     
  post_build:
    on-failure: ABORT  
    commands:
      - |
        if [ -n "$IMAGE_TAG_EXISTS" ] 
        then 
          echo "--------------------------------Image tag already exists--------------------------------"                    
        else 
          echo "--------------------------------Build completed on `date`--------------------------------"
          echo "--------------------------------PRINT CODEBUILD_RESOLVED_SOURCE_VERSION=${IMAGE_TAG}--------------------------------"      
          echo "--------------------------------Pushing the Docker image--------------------------------"
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ENVIRONMENT/$IMAGE_REPO_NAME:$IMAGE_TAG
          echo "--------------------------------Updating fsa-stack helm chart repository with latest image tag--------------------------------"
          git config --global user.name "${GITHUB_USER}"            
          git config --global user.email "${GITHUB_USER_EMAIL}"      
          git clone https://giraffeman123:$GITHUB_TOKEN@github.com/giraffeman123/fsa-stack.git
          cd fsa-stack/
          yq -i '.deployment.fsaWebApp.imageTag=env(IMAGE_TAG)' values.yaml
          git add .
          git commit -m "updated helm chart with new ${IMAGE_REPO_NAME} image. IMAGE_TAG=${IMAGE_TAG}, CODEBUILD_ID=${CODEBUILD_BUILD_ID}"
          git push origin main                    
        fi    